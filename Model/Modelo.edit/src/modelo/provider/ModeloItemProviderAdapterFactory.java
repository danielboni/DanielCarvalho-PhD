/**
 */
package modelo.provider;

import java.util.ArrayList;
import java.util.Collection;

import modelo.util.ModeloAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModeloItemProviderAdapterFactory extends ModeloAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModeloItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.SLA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SLAItemProvider slaItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.SLA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSLAAdapter() {
		if (slaItemProvider == null) {
			slaItemProvider = new SLAItemProvider(this);
		}

		return slaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.UserSLA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserSLAItemProvider userSLAItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.UserSLA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserSLAAdapter() {
		if (userSLAItemProvider == null) {
			userSLAItemProvider = new UserSLAItemProvider(this);
		}

		return userSLAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.ServiceSLA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceSLAItemProvider serviceSLAItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.ServiceSLA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceSLAAdapter() {
		if (serviceSLAItemProvider == null) {
			serviceSLAItemProvider = new ServiceSLAItemProvider(this);
		}

		return serviceSLAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.Cloud} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudItemProvider cloudItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.Cloud}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudAdapter() {
		if (cloudItemProvider == null) {
			cloudItemProvider = new CloudItemProvider(this);
		}

		return cloudItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.Party} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartyItemProvider partyItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.Party}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartyAdapter() {
		if (partyItemProvider == null) {
			partyItemProvider = new PartyItemProvider(this);
		}

		return partyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.Query} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryItemProvider queryItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.Query}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryAdapter() {
		if (queryItemProvider == null) {
			queryItemProvider = new QueryItemProvider(this);
		}

		return queryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.ServiceComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceCompositionItemProvider serviceCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.ServiceComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceCompositionAdapter() {
		if (serviceCompositionItemProvider == null) {
			serviceCompositionItemProvider = new ServiceCompositionItemProvider(this);
		}

		return serviceCompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.Concepts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptsItemProvider conceptsItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.Concepts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptsAdapter() {
		if (conceptsItemProvider == null) {
			conceptsItemProvider = new ConceptsItemProvider(this);
		}

		return conceptsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.IntegrationSLA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegrationSLAItemProvider integrationSLAItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.IntegrationSLA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegrationSLAAdapter() {
		if (integrationSLAItemProvider == null) {
			integrationSLAItemProvider = new IntegrationSLAItemProvider(this);
		}

		return integrationSLAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.NegotiationRules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegotiationRulesItemProvider negotiationRulesItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.NegotiationRules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegotiationRulesAdapter() {
		if (negotiationRulesItemProvider == null) {
			negotiationRulesItemProvider = new NegotiationRulesItemProvider(this);
		}

		return negotiationRulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.Guaranty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuarantyItemProvider guarantyItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.Guaranty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuarantyAdapter() {
		if (guarantyItemProvider == null) {
			guarantyItemProvider = new GuarantyItemProvider(this);
		}

		return guarantyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.Obligation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObligationItemProvider obligationItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.Obligation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObligationAdapter() {
		if (obligationItemProvider == null) {
			obligationItemProvider = new ObligationItemProvider(this);
		}

		return obligationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link modelo.SLAParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SLAParametersItemProvider slaParametersItemProvider;

	/**
	 * This creates an adapter for a {@link modelo.SLAParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSLAParametersAdapter() {
		if (slaParametersItemProvider == null) {
			slaParametersItemProvider = new SLAParametersItemProvider(this);
		}

		return slaParametersItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (slaItemProvider != null) slaItemProvider.dispose();
		if (userSLAItemProvider != null) userSLAItemProvider.dispose();
		if (serviceSLAItemProvider != null) serviceSLAItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (cloudItemProvider != null) cloudItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (partyItemProvider != null) partyItemProvider.dispose();
		if (queryItemProvider != null) queryItemProvider.dispose();
		if (serviceCompositionItemProvider != null) serviceCompositionItemProvider.dispose();
		if (conceptsItemProvider != null) conceptsItemProvider.dispose();
		if (integrationSLAItemProvider != null) integrationSLAItemProvider.dispose();
		if (negotiationRulesItemProvider != null) negotiationRulesItemProvider.dispose();
		if (guarantyItemProvider != null) guarantyItemProvider.dispose();
		if (obligationItemProvider != null) obligationItemProvider.dispose();
		if (slaParametersItemProvider != null) slaParametersItemProvider.dispose();
	}

}
